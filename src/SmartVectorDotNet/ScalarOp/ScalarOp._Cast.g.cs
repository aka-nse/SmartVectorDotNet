// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using System.Numerics;
using System.Runtime.CompilerServices;
namespace SmartVectorDotNet;

partial class ScalarOp
{
    /// <summary>
    /// Casts the value from <typeparamref name="TFrom"/> to <typeparamref name="TTo"/>.
    /// </summary>
    /// <typeparam name="TFrom"></typeparam>
    /// <typeparam name="TTo"></typeparam>
    /// <param name="x"></param>
    /// <returns></returns>
    /// <exception cref="NotSupportedException"></exception>
    public static TTo Convert<TFrom, TTo>(TFrom x)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        if(typeof(TFrom) == typeof(TTo))
            return Reinterpret<TFrom, TTo>(x);

        if(typeof(TFrom) == typeof(byte  ))
        {
            if(typeof(TTo) == typeof(ushort)) return Reinterpret<ushort, TTo>((ushort)Reinterpret<TFrom, byte  >(x));
            if(typeof(TTo) == typeof(uint  )) return Reinterpret<uint  , TTo>((uint  )Reinterpret<TFrom, byte  >(x));
            if(typeof(TTo) == typeof(ulong )) return Reinterpret<ulong , TTo>((ulong )Reinterpret<TFrom, byte  >(x));
            if(typeof(TTo) == typeof(nuint )) return Reinterpret<nuint , TTo>((nuint )Reinterpret<TFrom, byte  >(x));
            if(typeof(TTo) == typeof(sbyte )) return Reinterpret<sbyte , TTo>((sbyte )Reinterpret<TFrom, byte  >(x));
            if(typeof(TTo) == typeof(short )) return Reinterpret<short , TTo>((short )Reinterpret<TFrom, byte  >(x));
            if(typeof(TTo) == typeof(int   )) return Reinterpret<int   , TTo>((int   )Reinterpret<TFrom, byte  >(x));
            if(typeof(TTo) == typeof(long  )) return Reinterpret<long  , TTo>((long  )Reinterpret<TFrom, byte  >(x));
            if(typeof(TTo) == typeof(nint  )) return Reinterpret<nint  , TTo>((nint  )Reinterpret<TFrom, byte  >(x));
            if(typeof(TTo) == typeof(float )) return Reinterpret<float , TTo>((float )Reinterpret<TFrom, byte  >(x));
            if(typeof(TTo) == typeof(double)) return Reinterpret<double, TTo>((double)Reinterpret<TFrom, byte  >(x));
        }
        if(typeof(TFrom) == typeof(ushort))
        {
            if(typeof(TTo) == typeof(byte  )) return Reinterpret<byte  , TTo>((byte  )Reinterpret<TFrom, ushort>(x));
            if(typeof(TTo) == typeof(uint  )) return Reinterpret<uint  , TTo>((uint  )Reinterpret<TFrom, ushort>(x));
            if(typeof(TTo) == typeof(ulong )) return Reinterpret<ulong , TTo>((ulong )Reinterpret<TFrom, ushort>(x));
            if(typeof(TTo) == typeof(nuint )) return Reinterpret<nuint , TTo>((nuint )Reinterpret<TFrom, ushort>(x));
            if(typeof(TTo) == typeof(sbyte )) return Reinterpret<sbyte , TTo>((sbyte )Reinterpret<TFrom, ushort>(x));
            if(typeof(TTo) == typeof(short )) return Reinterpret<short , TTo>((short )Reinterpret<TFrom, ushort>(x));
            if(typeof(TTo) == typeof(int   )) return Reinterpret<int   , TTo>((int   )Reinterpret<TFrom, ushort>(x));
            if(typeof(TTo) == typeof(long  )) return Reinterpret<long  , TTo>((long  )Reinterpret<TFrom, ushort>(x));
            if(typeof(TTo) == typeof(nint  )) return Reinterpret<nint  , TTo>((nint  )Reinterpret<TFrom, ushort>(x));
            if(typeof(TTo) == typeof(float )) return Reinterpret<float , TTo>((float )Reinterpret<TFrom, ushort>(x));
            if(typeof(TTo) == typeof(double)) return Reinterpret<double, TTo>((double)Reinterpret<TFrom, ushort>(x));
        }
        if(typeof(TFrom) == typeof(uint  ))
        {
            if(typeof(TTo) == typeof(byte  )) return Reinterpret<byte  , TTo>((byte  )Reinterpret<TFrom, uint  >(x));
            if(typeof(TTo) == typeof(ushort)) return Reinterpret<ushort, TTo>((ushort)Reinterpret<TFrom, uint  >(x));
            if(typeof(TTo) == typeof(ulong )) return Reinterpret<ulong , TTo>((ulong )Reinterpret<TFrom, uint  >(x));
            if(typeof(TTo) == typeof(nuint )) return Reinterpret<nuint , TTo>((nuint )Reinterpret<TFrom, uint  >(x));
            if(typeof(TTo) == typeof(sbyte )) return Reinterpret<sbyte , TTo>((sbyte )Reinterpret<TFrom, uint  >(x));
            if(typeof(TTo) == typeof(short )) return Reinterpret<short , TTo>((short )Reinterpret<TFrom, uint  >(x));
            if(typeof(TTo) == typeof(int   )) return Reinterpret<int   , TTo>((int   )Reinterpret<TFrom, uint  >(x));
            if(typeof(TTo) == typeof(long  )) return Reinterpret<long  , TTo>((long  )Reinterpret<TFrom, uint  >(x));
            if(typeof(TTo) == typeof(nint  )) return Reinterpret<nint  , TTo>((nint  )Reinterpret<TFrom, uint  >(x));
            if(typeof(TTo) == typeof(float )) return Reinterpret<float , TTo>((float )Reinterpret<TFrom, uint  >(x));
            if(typeof(TTo) == typeof(double)) return Reinterpret<double, TTo>((double)Reinterpret<TFrom, uint  >(x));
        }
        if(typeof(TFrom) == typeof(ulong ))
        {
            if(typeof(TTo) == typeof(byte  )) return Reinterpret<byte  , TTo>((byte  )Reinterpret<TFrom, ulong >(x));
            if(typeof(TTo) == typeof(ushort)) return Reinterpret<ushort, TTo>((ushort)Reinterpret<TFrom, ulong >(x));
            if(typeof(TTo) == typeof(uint  )) return Reinterpret<uint  , TTo>((uint  )Reinterpret<TFrom, ulong >(x));
            if(typeof(TTo) == typeof(nuint )) return Reinterpret<nuint , TTo>((nuint )Reinterpret<TFrom, ulong >(x));
            if(typeof(TTo) == typeof(sbyte )) return Reinterpret<sbyte , TTo>((sbyte )Reinterpret<TFrom, ulong >(x));
            if(typeof(TTo) == typeof(short )) return Reinterpret<short , TTo>((short )Reinterpret<TFrom, ulong >(x));
            if(typeof(TTo) == typeof(int   )) return Reinterpret<int   , TTo>((int   )Reinterpret<TFrom, ulong >(x));
            if(typeof(TTo) == typeof(long  )) return Reinterpret<long  , TTo>((long  )Reinterpret<TFrom, ulong >(x));
            if(typeof(TTo) == typeof(nint  )) return Reinterpret<nint  , TTo>((nint  )Reinterpret<TFrom, ulong >(x));
            if(typeof(TTo) == typeof(float )) return Reinterpret<float , TTo>((float )Reinterpret<TFrom, ulong >(x));
            if(typeof(TTo) == typeof(double)) return Reinterpret<double, TTo>((double)Reinterpret<TFrom, ulong >(x));
        }
        if(typeof(TFrom) == typeof(nuint ))
        {
            if(typeof(TTo) == typeof(byte  )) return Reinterpret<byte  , TTo>((byte  )Reinterpret<TFrom, nuint >(x));
            if(typeof(TTo) == typeof(ushort)) return Reinterpret<ushort, TTo>((ushort)Reinterpret<TFrom, nuint >(x));
            if(typeof(TTo) == typeof(uint  )) return Reinterpret<uint  , TTo>((uint  )Reinterpret<TFrom, nuint >(x));
            if(typeof(TTo) == typeof(ulong )) return Reinterpret<ulong , TTo>((ulong )Reinterpret<TFrom, nuint >(x));
            if(typeof(TTo) == typeof(sbyte )) return Reinterpret<sbyte , TTo>((sbyte )Reinterpret<TFrom, nuint >(x));
            if(typeof(TTo) == typeof(short )) return Reinterpret<short , TTo>((short )Reinterpret<TFrom, nuint >(x));
            if(typeof(TTo) == typeof(int   )) return Reinterpret<int   , TTo>((int   )Reinterpret<TFrom, nuint >(x));
            if(typeof(TTo) == typeof(long  )) return Reinterpret<long  , TTo>((long  )Reinterpret<TFrom, nuint >(x));
            if(typeof(TTo) == typeof(nint  )) return Reinterpret<nint  , TTo>((nint  )Reinterpret<TFrom, nuint >(x));
            if(typeof(TTo) == typeof(float )) return Reinterpret<float , TTo>((float )Reinterpret<TFrom, nuint >(x));
            if(typeof(TTo) == typeof(double)) return Reinterpret<double, TTo>((double)Reinterpret<TFrom, nuint >(x));
        }
        if(typeof(TFrom) == typeof(sbyte ))
        {
            if(typeof(TTo) == typeof(byte  )) return Reinterpret<byte  , TTo>((byte  )Reinterpret<TFrom, sbyte >(x));
            if(typeof(TTo) == typeof(ushort)) return Reinterpret<ushort, TTo>((ushort)Reinterpret<TFrom, sbyte >(x));
            if(typeof(TTo) == typeof(uint  )) return Reinterpret<uint  , TTo>((uint  )Reinterpret<TFrom, sbyte >(x));
            if(typeof(TTo) == typeof(ulong )) return Reinterpret<ulong , TTo>((ulong )Reinterpret<TFrom, sbyte >(x));
            if(typeof(TTo) == typeof(nuint )) return Reinterpret<nuint , TTo>((nuint )Reinterpret<TFrom, sbyte >(x));
            if(typeof(TTo) == typeof(short )) return Reinterpret<short , TTo>((short )Reinterpret<TFrom, sbyte >(x));
            if(typeof(TTo) == typeof(int   )) return Reinterpret<int   , TTo>((int   )Reinterpret<TFrom, sbyte >(x));
            if(typeof(TTo) == typeof(long  )) return Reinterpret<long  , TTo>((long  )Reinterpret<TFrom, sbyte >(x));
            if(typeof(TTo) == typeof(nint  )) return Reinterpret<nint  , TTo>((nint  )Reinterpret<TFrom, sbyte >(x));
            if(typeof(TTo) == typeof(float )) return Reinterpret<float , TTo>((float )Reinterpret<TFrom, sbyte >(x));
            if(typeof(TTo) == typeof(double)) return Reinterpret<double, TTo>((double)Reinterpret<TFrom, sbyte >(x));
        }
        if(typeof(TFrom) == typeof(short ))
        {
            if(typeof(TTo) == typeof(byte  )) return Reinterpret<byte  , TTo>((byte  )Reinterpret<TFrom, short >(x));
            if(typeof(TTo) == typeof(ushort)) return Reinterpret<ushort, TTo>((ushort)Reinterpret<TFrom, short >(x));
            if(typeof(TTo) == typeof(uint  )) return Reinterpret<uint  , TTo>((uint  )Reinterpret<TFrom, short >(x));
            if(typeof(TTo) == typeof(ulong )) return Reinterpret<ulong , TTo>((ulong )Reinterpret<TFrom, short >(x));
            if(typeof(TTo) == typeof(nuint )) return Reinterpret<nuint , TTo>((nuint )Reinterpret<TFrom, short >(x));
            if(typeof(TTo) == typeof(sbyte )) return Reinterpret<sbyte , TTo>((sbyte )Reinterpret<TFrom, short >(x));
            if(typeof(TTo) == typeof(int   )) return Reinterpret<int   , TTo>((int   )Reinterpret<TFrom, short >(x));
            if(typeof(TTo) == typeof(long  )) return Reinterpret<long  , TTo>((long  )Reinterpret<TFrom, short >(x));
            if(typeof(TTo) == typeof(nint  )) return Reinterpret<nint  , TTo>((nint  )Reinterpret<TFrom, short >(x));
            if(typeof(TTo) == typeof(float )) return Reinterpret<float , TTo>((float )Reinterpret<TFrom, short >(x));
            if(typeof(TTo) == typeof(double)) return Reinterpret<double, TTo>((double)Reinterpret<TFrom, short >(x));
        }
        if(typeof(TFrom) == typeof(int   ))
        {
            if(typeof(TTo) == typeof(byte  )) return Reinterpret<byte  , TTo>((byte  )Reinterpret<TFrom, int   >(x));
            if(typeof(TTo) == typeof(ushort)) return Reinterpret<ushort, TTo>((ushort)Reinterpret<TFrom, int   >(x));
            if(typeof(TTo) == typeof(uint  )) return Reinterpret<uint  , TTo>((uint  )Reinterpret<TFrom, int   >(x));
            if(typeof(TTo) == typeof(ulong )) return Reinterpret<ulong , TTo>((ulong )Reinterpret<TFrom, int   >(x));
            if(typeof(TTo) == typeof(nuint )) return Reinterpret<nuint , TTo>((nuint )Reinterpret<TFrom, int   >(x));
            if(typeof(TTo) == typeof(sbyte )) return Reinterpret<sbyte , TTo>((sbyte )Reinterpret<TFrom, int   >(x));
            if(typeof(TTo) == typeof(short )) return Reinterpret<short , TTo>((short )Reinterpret<TFrom, int   >(x));
            if(typeof(TTo) == typeof(long  )) return Reinterpret<long  , TTo>((long  )Reinterpret<TFrom, int   >(x));
            if(typeof(TTo) == typeof(nint  )) return Reinterpret<nint  , TTo>((nint  )Reinterpret<TFrom, int   >(x));
            if(typeof(TTo) == typeof(float )) return Reinterpret<float , TTo>((float )Reinterpret<TFrom, int   >(x));
            if(typeof(TTo) == typeof(double)) return Reinterpret<double, TTo>((double)Reinterpret<TFrom, int   >(x));
        }
        if(typeof(TFrom) == typeof(long  ))
        {
            if(typeof(TTo) == typeof(byte  )) return Reinterpret<byte  , TTo>((byte  )Reinterpret<TFrom, long  >(x));
            if(typeof(TTo) == typeof(ushort)) return Reinterpret<ushort, TTo>((ushort)Reinterpret<TFrom, long  >(x));
            if(typeof(TTo) == typeof(uint  )) return Reinterpret<uint  , TTo>((uint  )Reinterpret<TFrom, long  >(x));
            if(typeof(TTo) == typeof(ulong )) return Reinterpret<ulong , TTo>((ulong )Reinterpret<TFrom, long  >(x));
            if(typeof(TTo) == typeof(nuint )) return Reinterpret<nuint , TTo>((nuint )Reinterpret<TFrom, long  >(x));
            if(typeof(TTo) == typeof(sbyte )) return Reinterpret<sbyte , TTo>((sbyte )Reinterpret<TFrom, long  >(x));
            if(typeof(TTo) == typeof(short )) return Reinterpret<short , TTo>((short )Reinterpret<TFrom, long  >(x));
            if(typeof(TTo) == typeof(int   )) return Reinterpret<int   , TTo>((int   )Reinterpret<TFrom, long  >(x));
            if(typeof(TTo) == typeof(nint  )) return Reinterpret<nint  , TTo>((nint  )Reinterpret<TFrom, long  >(x));
            if(typeof(TTo) == typeof(float )) return Reinterpret<float , TTo>((float )Reinterpret<TFrom, long  >(x));
            if(typeof(TTo) == typeof(double)) return Reinterpret<double, TTo>((double)Reinterpret<TFrom, long  >(x));
        }
        if(typeof(TFrom) == typeof(nint  ))
        {
            if(typeof(TTo) == typeof(byte  )) return Reinterpret<byte  , TTo>((byte  )Reinterpret<TFrom, nint  >(x));
            if(typeof(TTo) == typeof(ushort)) return Reinterpret<ushort, TTo>((ushort)Reinterpret<TFrom, nint  >(x));
            if(typeof(TTo) == typeof(uint  )) return Reinterpret<uint  , TTo>((uint  )Reinterpret<TFrom, nint  >(x));
            if(typeof(TTo) == typeof(ulong )) return Reinterpret<ulong , TTo>((ulong )Reinterpret<TFrom, nint  >(x));
            if(typeof(TTo) == typeof(nuint )) return Reinterpret<nuint , TTo>((nuint )Reinterpret<TFrom, nint  >(x));
            if(typeof(TTo) == typeof(sbyte )) return Reinterpret<sbyte , TTo>((sbyte )Reinterpret<TFrom, nint  >(x));
            if(typeof(TTo) == typeof(short )) return Reinterpret<short , TTo>((short )Reinterpret<TFrom, nint  >(x));
            if(typeof(TTo) == typeof(int   )) return Reinterpret<int   , TTo>((int   )Reinterpret<TFrom, nint  >(x));
            if(typeof(TTo) == typeof(long  )) return Reinterpret<long  , TTo>((long  )Reinterpret<TFrom, nint  >(x));
            if(typeof(TTo) == typeof(float )) return Reinterpret<float , TTo>((float )Reinterpret<TFrom, nint  >(x));
            if(typeof(TTo) == typeof(double)) return Reinterpret<double, TTo>((double)Reinterpret<TFrom, nint  >(x));
        }
        if(typeof(TFrom) == typeof(float ))
        {
            if(typeof(TTo) == typeof(byte  )) return Reinterpret<byte  , TTo>((byte  )Reinterpret<TFrom, float >(x));
            if(typeof(TTo) == typeof(ushort)) return Reinterpret<ushort, TTo>((ushort)Reinterpret<TFrom, float >(x));
            if(typeof(TTo) == typeof(uint  )) return Reinterpret<uint  , TTo>((uint  )Reinterpret<TFrom, float >(x));
            if(typeof(TTo) == typeof(ulong )) return Reinterpret<ulong , TTo>((ulong )Reinterpret<TFrom, float >(x));
            if(typeof(TTo) == typeof(nuint )) return Reinterpret<nuint , TTo>((nuint )Reinterpret<TFrom, float >(x));
            if(typeof(TTo) == typeof(sbyte )) return Reinterpret<sbyte , TTo>((sbyte )Reinterpret<TFrom, float >(x));
            if(typeof(TTo) == typeof(short )) return Reinterpret<short , TTo>((short )Reinterpret<TFrom, float >(x));
            if(typeof(TTo) == typeof(int   )) return Reinterpret<int   , TTo>((int   )Reinterpret<TFrom, float >(x));
            if(typeof(TTo) == typeof(long  )) return Reinterpret<long  , TTo>((long  )Reinterpret<TFrom, float >(x));
            if(typeof(TTo) == typeof(nint  )) return Reinterpret<nint  , TTo>((nint  )Reinterpret<TFrom, float >(x));
            if(typeof(TTo) == typeof(double)) return Reinterpret<double, TTo>((double)Reinterpret<TFrom, float >(x));
        }
        if(typeof(TFrom) == typeof(double))
        {
            if(typeof(TTo) == typeof(byte  )) return Reinterpret<byte  , TTo>((byte  )Reinterpret<TFrom, double>(x));
            if(typeof(TTo) == typeof(ushort)) return Reinterpret<ushort, TTo>((ushort)Reinterpret<TFrom, double>(x));
            if(typeof(TTo) == typeof(uint  )) return Reinterpret<uint  , TTo>((uint  )Reinterpret<TFrom, double>(x));
            if(typeof(TTo) == typeof(ulong )) return Reinterpret<ulong , TTo>((ulong )Reinterpret<TFrom, double>(x));
            if(typeof(TTo) == typeof(nuint )) return Reinterpret<nuint , TTo>((nuint )Reinterpret<TFrom, double>(x));
            if(typeof(TTo) == typeof(sbyte )) return Reinterpret<sbyte , TTo>((sbyte )Reinterpret<TFrom, double>(x));
            if(typeof(TTo) == typeof(short )) return Reinterpret<short , TTo>((short )Reinterpret<TFrom, double>(x));
            if(typeof(TTo) == typeof(int   )) return Reinterpret<int   , TTo>((int   )Reinterpret<TFrom, double>(x));
            if(typeof(TTo) == typeof(long  )) return Reinterpret<long  , TTo>((long  )Reinterpret<TFrom, double>(x));
            if(typeof(TTo) == typeof(nint  )) return Reinterpret<nint  , TTo>((nint  )Reinterpret<TFrom, double>(x));
            if(typeof(TTo) == typeof(float )) return Reinterpret<float , TTo>((float )Reinterpret<TFrom, double>(x));
        }
        throw new NotSupportedException();
    }
}