<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
var types = new [] {
    "byte  ",
    "ushort",
    "uint  ",
    "ulong ",
    "nuint ",
    "sbyte ",
    "short ",
    "int   ",
    "long  ",
    "nint  ",
    "float ",
    "double",
};
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using System.Numerics;
using System.Runtime.CompilerServices;
namespace SmartVectorDotNet;

partial class ScalarOp
{
    /// <summary>
    /// Casts the value from <typeparamref name="TFrom"/> to <typeparamref name="TTo"/>.
    /// </summary>
    /// <typeparam name="TFrom"></typeparam>
    /// <typeparam name="TTo"></typeparam>
    /// <param name="x"></param>
    /// <returns></returns>
    /// <exception cref="NotSupportedException"></exception>
    public static TTo Convert<TFrom, TTo>(TFrom x)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        if(typeof(TFrom) == typeof(TTo))
            return Reinterpret<TFrom, TTo>(x);

<#  foreach(var typeA in types) { #>
        if(typeof(TFrom) == typeof(<#=typeA#>))
        {
<#      foreach(var typeB in types.Where(typeB => typeA != typeB)) { #>
            if(typeof(TTo) == typeof(<#=typeB#>)) return Reinterpret<<#=typeB#>, TTo>((<#=typeB#>)Reinterpret<TFrom, <#=typeA#>>(x));
<#      } #>
        }
<#  } #>
        throw new NotSupportedException();
    }
}