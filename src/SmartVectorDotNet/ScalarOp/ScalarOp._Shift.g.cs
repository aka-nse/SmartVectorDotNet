// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using System.Runtime.CompilerServices;
namespace SmartVectorDotNet;

partial class ScalarOp
{

    /// <summary> Operates <c>ShiftLeft</c> unaly operation. </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="x"></param>
    /// <param name="y"></param>
    /// <returns></returns>
    /// <exception cref="NotSupportedException" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T ShiftLeft<T>(in T x, int y)
        where T : unmanaged
    {
        if(typeof(T) == typeof(byte  )) return Reinterpret<byte  , T>((byte  )(Reinterpret<T, byte  >(x) << y));
        if(typeof(T) == typeof(ushort)) return Reinterpret<ushort, T>((ushort)(Reinterpret<T, ushort>(x) << y));
        if(typeof(T) == typeof(uint  )) return Reinterpret<uint  , T>((uint  )(Reinterpret<T, uint  >(x) << y));
        if(typeof(T) == typeof(ulong )) return Reinterpret<ulong , T>((ulong )(Reinterpret<T, ulong >(x) << y));
        if(typeof(T) == typeof(nuint )) return Reinterpret<nuint , T>((nuint )(Reinterpret<T, nuint >(x) << y));
        if(typeof(T) == typeof(sbyte )) return Reinterpret<sbyte , T>((sbyte )(Reinterpret<T, sbyte >(x) << y));
        if(typeof(T) == typeof(short )) return Reinterpret<short , T>((short )(Reinterpret<T, short >(x) << y));
        if(typeof(T) == typeof(int   )) return Reinterpret<int   , T>((int   )(Reinterpret<T, int   >(x) << y));
        if(typeof(T) == typeof(long  )) return Reinterpret<long  , T>((long  )(Reinterpret<T, long  >(x) << y));
        if(typeof(T) == typeof(nint  )) return Reinterpret<nint  , T>((nint  )(Reinterpret<T, nint  >(x) << y));
        if(typeof(T) == typeof(float )) throw new NotSupportedException();
        if(typeof(T) == typeof(double)) throw new NotSupportedException();
        throw new NotSupportedException();
    }


    /// <summary> Operates <c>ShiftRight</c> unaly operation. </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="x"></param>
    /// <param name="y"></param>
    /// <returns></returns>
    /// <exception cref="NotSupportedException" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T ShiftRight<T>(in T x, int y)
        where T : unmanaged
    {
        if(typeof(T) == typeof(byte  )) return Reinterpret<byte  , T>((byte  )(Reinterpret<T, byte  >(x) >> y));
        if(typeof(T) == typeof(ushort)) return Reinterpret<ushort, T>((ushort)(Reinterpret<T, ushort>(x) >> y));
        if(typeof(T) == typeof(uint  )) return Reinterpret<uint  , T>((uint  )(Reinterpret<T, uint  >(x) >> y));
        if(typeof(T) == typeof(ulong )) return Reinterpret<ulong , T>((ulong )(Reinterpret<T, ulong >(x) >> y));
        if(typeof(T) == typeof(nuint )) return Reinterpret<nuint , T>((nuint )(Reinterpret<T, nuint >(x) >> y));
        if(typeof(T) == typeof(sbyte )) return Reinterpret<sbyte , T>((sbyte )(Reinterpret<T, sbyte >(x) >> y));
        if(typeof(T) == typeof(short )) return Reinterpret<short , T>((short )(Reinterpret<T, short >(x) >> y));
        if(typeof(T) == typeof(int   )) return Reinterpret<int   , T>((int   )(Reinterpret<T, int   >(x) >> y));
        if(typeof(T) == typeof(long  )) return Reinterpret<long  , T>((long  )(Reinterpret<T, long  >(x) >> y));
        if(typeof(T) == typeof(nint  )) return Reinterpret<nint  , T>((nint  )(Reinterpret<T, nint  >(x) >> y));
        if(typeof(T) == typeof(float )) throw new NotSupportedException();
        if(typeof(T) == typeof(double)) throw new NotSupportedException();
        throw new NotSupportedException();
    }

}

