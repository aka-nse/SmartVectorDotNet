<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
var operations = new (string, Func<string, string, string>) [] {
    ("ShiftLeft" , (x, y) =>$"{x} << {y}"),
    ("ShiftRight", (x, y) =>$"{x} >> {y}"),
};
var types = new TypeDef [] {
    new TypeDef("byte"  , true ),
    new TypeDef("ushort", true ),
    new TypeDef("uint"  , true ),
    new TypeDef("ulong" , true ),
    new TypeDef("nuint" , true ),
    new TypeDef("sbyte" , true ),
    new TypeDef("short" , true ),
    new TypeDef("int"   , true ),
    new TypeDef("long"  , true ),
    new TypeDef("nint"  , true ),
    new TypeDef("float" , false),
    new TypeDef("double", false),
};
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using System.Runtime.CompilerServices;
namespace SmartVectorDotNet;

partial class ScalarOp
{
<# foreach(var (opname, op) in operations) { #>

    /// <summary> Operates <c><#=opname#></c> unaly operation. </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="x"></param>
    /// <param name="y"></param>
    /// <returns></returns>
    /// <exception cref="NotSupportedException" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T <#=opname#><T>(in T x, int y)
        where T : unmanaged
    {
<# foreach(var type in types) { #>
<#     if(type.IsSupported) { #>
        if(typeof(T) == typeof(<#=type#>)) return Reinterpret<<#=type#>, T>((<#=type#>)(<#=op($"Reinterpret<T, {type}>(x)", $"y")#>));
<#     } else { #>
        if(typeof(T) == typeof(<#=type#>)) throw new NotSupportedException();
<#     } #>
<# } #>
        throw new NotSupportedException();
    }

<# } #>
}

<#+
public class TypeDef
{
    public string Name { get; }
    public bool IsSupported { get; }

    public TypeDef(string name, bool isSupported)
    {
        Name       = name;
        IsSupported = isSupported;
    }

    public override string ToString() => $"{Name,-6}";
}
#>