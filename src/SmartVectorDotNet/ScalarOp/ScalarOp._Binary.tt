<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
var arithmeticOperations = new (string, Func<string, string, string>, bool) [] {
    ("Add"            , (x, y) =>$"{x} + {y}", false),
    ("AddChecked"     , (x, y) =>$"{x} + {y}", true ),
    ("Subtract"       , (x, y) =>$"{x} - {y}", false),
    ("SubtractChecked", (x, y) =>$"{x} - {y}", true ),
    ("Multiply"       , (x, y) =>$"{x} * {y}", false),
    ("MultiplyChecked", (x, y) =>$"{x} * {y}", true ),
    ("Divide"         , (x, y) =>$"{x} / {y}", false),
    ("Modulo"         , (x, y) =>$"{x} % {y}", false),
};
var arithmeticTypes = new [] {
    "byte  ",
    "ushort",
    "uint  ",
    "ulong ",
    "nuint ",
    "sbyte ",
    "short ",
    "int   ",
    "long  ",
    "nint  ",
    "float ",
    "double",
};
var bitwiseOperations = new (string, Func<string, string, string>, bool) [] {
    ("BitwiseOr"      , (x, y) =>$"{x} | {y}", false),
    ("BitwiseAnd"     , (x, y) =>$"{x} & {y}", false),
    ("BitwiseXor"     , (x, y) =>$"{x} ^ {y}", false),
};
var bitwiseTypes = new [] {
    "byte  ",
    "ushort",
    "uint  ",
    "ulong ",
    "sbyte ",
    "short ",
    "int   ",
    "long  ",
};
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using System.Runtime.CompilerServices;
namespace SmartVectorDotNet;

partial class ScalarOp
{
<#  foreach(var (opname, op, isChecked) in arithmeticOperations) { #>

    /// <summary> Operates <c><#=opname#></c> unaly operation. </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="x"></param>
    /// <param name="y"></param>
    /// <returns></returns>
    /// <exception cref="NotSupportedException" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T <#=opname#><T>(in T x, in T y)
        where T : unmanaged
    {
        <#=isChecked ? "checked" : "unchecked"#>
        {
<#      foreach(var type in arithmeticTypes) { #>
            if(typeof(T) == typeof(<#=type#>)) return Reinterpret<<#=type#>, T>((<#=type#>)(<#=op($"Reinterpret<T, {type}>(x)", $"Reinterpret<T, {type}>(y)")#>));
<#      } #>
        }
        throw new NotSupportedException();
    }

<#  } #>

<#  foreach(var (opname, op, isChecked) in bitwiseOperations) { #>

    /// <summary> Operates <c><#=opname#></c> unaly operation. </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="x"></param>
    /// <param name="y"></param>
    /// <returns></returns>
    /// <exception cref="NotSupportedException" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T <#=opname#><T>(in T x, in T y)
        where T : unmanaged
    {
        <#=isChecked ? "checked" : "unchecked"#>
        {
<#      foreach(var type in bitwiseTypes) { #>
            if(typeof(T) == typeof(<#=type#>)) return Reinterpret<<#=type#>, T>((<#=type#>)(<#=op($"Reinterpret<T, {type}>(x)", $"Reinterpret<T, {type}>(y)")#>));
<#      } #>
            if(typeof(T) == typeof(float )) return Reinterpret<uint  , T>((uint  )(<#=op($"Reinterpret<T, uint  >(x)", $"Reinterpret<T, uint  >(y)")#>));
            if(typeof(T) == typeof(double)) return Reinterpret<ulong , T>((ulong )(<#=op($"Reinterpret<T, ulong >(x)", $"Reinterpret<T, ulong >(y)")#>));
        }
        throw new NotSupportedException();
    }

<#  } #>
}
