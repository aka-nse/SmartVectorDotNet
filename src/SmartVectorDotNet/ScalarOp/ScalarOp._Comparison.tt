<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
var types = new [] {
    "byte  ",
    "ushort",
    "uint  ",
    "ulong ",
    "nuint ",
    "sbyte ",
    "short ",
    "int   ",
    "long  ",
    "nint  ",
    "float ",
    "double",
};
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using System.Runtime.CompilerServices;
namespace SmartVectorDotNet;

partial class ScalarOp
{
    /// <summary> Compares 2 values of <typeparamref name="T"/>. </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="x"></param>
    /// <param name="y"></param>
    /// <returns></returns>
    /// <exception cref="NotSupportedException" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool Equals<T>(in T x, in T y)
        where T : unmanaged
    {
<# foreach(var type in types) { #>
        if(typeof(T) == typeof(<#=type#>)) return Reinterpret<T, <#=type#>>(x) == Reinterpret<T, <#=type#>>(y);
<# } #>
        throw new NotSupportedException();
    }


    /// <summary> Compares 2 values of <typeparamref name="T"/>. </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="x"></param>
    /// <param name="y"></param>
    /// <returns></returns>
    /// <exception cref="NotSupportedException" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static int Compare<T>(in T x, in T y)
        where T : unmanaged
    {
<# foreach(var type in types) { #>
        if(typeof(T) == typeof(<#=type#>))
        {
            var xx = Unsafe.As<T, <#=type#>>(ref Unsafe.AsRef(in x));
            var yy = Unsafe.As<T, <#=type#>>(ref Unsafe.AsRef(in y));
            if(xx == yy) return 0;
            return xx > yy ? +1 : -1;
        }
<# } #>
        throw new NotSupportedException();
    }
}
