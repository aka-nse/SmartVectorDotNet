<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
#nullable enable
using System;
using System.Collections.Generic;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SmartVectorDotNet;

<# for(var i = 1; i <= 10; ++i) { #>
#region IVectorFormula<#=i#>

/// <summary>
/// Defines a mathematical calculation which can be vectorized.
/// This interface shall be implemented on struct type.
/// </summary>
/// <typeparam name="T"></typeparam>
public interface IVectorFormula<#=i#><T>
    where T : unmanaged
{
    /// <summary>
    /// Calculates scalar operation.
    /// </summary>
<#   for(var j = 1; j <= i; ++j) { #>
    /// <param name="x<#=j#>"></param>
<#   } #>
    /// <returns></returns>
    public T Calculate(<#=CommaSeparated(1, i, j => $"T x{j}")#>);

    /// <summary>
    /// Calculates vector operation.
    /// </summary>
<#   for(var j = 1; j <= i; ++j) { #>
    /// <param name="x<#=j#>"></param>
<#   } #>
    /// <returns></returns>
    public Vector<T> Calculate(<#=CommaSeparated(1, i, j => $"Vector<T> x{j}")#>);
}

partial class Vectorization
{
    /// <summary>
    /// Calculates the custom vectorizable operation.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <typeparam name="TFormula"></typeparam>
<#   for(var j = 1; j <= i; ++j) { #>
    /// <param name="x<#=j#>"></param>
<#   } #>
    /// <param name="ans"></param>
    public void Calculate<T, TFormula>(<#=CommaSeparated(1, i, j => $"ReadOnlySpan<T> x{j}")#>, Span<T> ans)
        where T : unmanaged
        where TFormula : struct, IVectorFormula<#=i#><T>
    {
<#   for(var j = 1; j <= i; ++j) { #>
        if(x<#=j#>.Length != ans.Length) throw new ArgumentException("`x<#=j#>` and `ans` must have same length.");
<#   } #>
        var formula = default(TFormula);
        CalculateCore<T, TFormula>(ref formula, <#=CommaSeparated(1, i, j => $"x{j}")#>, ans);
    }
    
    /// <summary>
    /// Calculates the custom vectorizable operation.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <typeparam name="TFormula"></typeparam>
    /// <param name="formula"></param>
<#   for(var j = 1; j <= i; ++j) { #>
    /// <param name="x<#=j#>"></param>
<#   } #>
    /// <param name="ans"></param>
    public void Calculate<T, TFormula>(ref TFormula formula, <#=CommaSeparated(1, i, j => $"ReadOnlySpan<T> x{j}")#>, Span<T> ans)
        where T : unmanaged
        where TFormula : struct, IVectorFormula<#=i#><T>
    {
<#   for(var j = 1; j <= i; ++j) { #>
        if(x<#=j#>.Length != ans.Length) throw new ArgumentException("`x<#=j#>` and `ans` must have same length.");
<#   } #>
        CalculateCore<T, TFormula>(ref formula, <#=CommaSeparated(1, i, j => $"x{j}")#>, ans);
    }
    
    /// <summary>
    /// Core implementation for
    /// <see cref="Calculate{T, TFormula}(<#=CommaSeparated(1, i, j => $"ReadOnlySpan{{T}}")#>, Span{T})" />
    /// and
    /// <see cref="Calculate{T, TFormula}(ref TFormula, <#=CommaSeparated(1, i, j => $"ReadOnlySpan{{T}}")#>, Span{T})" />.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <typeparam name="TFormula"></typeparam>
    /// <param name="formula"></param>
<#   for(var j = 1; j <= i; ++j) { #>
    /// <param name="x<#=j#>"></param>
<#   } #>
    /// <param name="ans"></param>
    protected internal virtual void CalculateCore<T, TFormula>(ref TFormula formula, <#=CommaSeparated(1, i, j => $"ReadOnlySpan<T> x{j}")#>, Span<T> ans)
        where T : unmanaged
        where TFormula : struct, IVectorFormula<#=i#><T>
    {
        for(var i = 0; i < ans.Length; ++i)
            ans[i] = formula.Calculate(<#=CommaSeparated(1, i, j => $"x{j}[i]")#>);
    }
}


partial class SimdVectorization
{
    /// <inheritdoc />
    protected internal override void CalculateCore<T, TFormula>(ref TFormula formula, <#=CommaSeparated(1, i, j => $"ReadOnlySpan<T> x{j}")#>, Span<T> ans)
    {
<# for(var j = 1; j <= i; ++j) { #>
        var vectorX<#=j#> = MemoryMarshal.Cast<T, Vector<T>>(x<#=j#>);
<# } #>
        var vectorAns = MemoryMarshal.Cast<T, Vector<T>>(ans);
        var vectorLength = vectorAns.Length * Vector<T>.Count;
        for(var i = 0; i < vectorAns.Length; ++i)
        {
            vectorAns[i] = formula.Calculate(<#=CommaSeparated(1, i, j => $"vectorX{j}[i]")#>);
        }
        if(vectorLength < ans.Length)
        {
<# for(var j = 1; j <= i; ++j) { #>
            var vx<#=j#> = (stackalloc Vector<T>[1]); x<#=j#>.Slice(vectorLength).CopyTo(MemoryMarshal.Cast<Vector<T>, T>(vx<#=j#>));
<# } #>
            var vans = (stackalloc Vector<T>[1]);
            vans[0] = formula.Calculate(<#=CommaSeparated(1, i, j => $"vx{j}[0]")#>);
            MemoryMarshal
                .Cast<Vector<T>, T>(vans)
                .Slice(0, ans.Length - vectorLength)
                .CopyTo(ans.Slice(vectorLength));
        }
    }
}

#endregion

<# } #>
<#+
string CommaSeparated(int start, int length, Func<int, string> func)
    => string.Join(", ", Enumerable.Range(start, length).Select(func));
#>