<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
var vectorMathMatcher = new Regex(
    @"public\s+static\s+(?:partial\s+)?Vector\s*<\s*T\s*>\s+(?<method>\w+)\s*<\s*T\s*>\s*\((?<args>.+)\)\s*" +
    @"where\s+T\s*:\s*unmanaged");
var unaryOps = new RealOpDef[]{
    new("Sqrt", "d"),
    new("Cos", "d"),
    new("Sin", "d"),
    new("Tan", "d"),
    new("Cosh", "d"),
    new("Sinh", "d"),
    new("Tanh", "d"),
    new("Acos", "d"),
    new("Asin", "d"),
    new("Atan", "d"),
    new("Acosh", "d"),
    new("Asinh", "d"),
    new("Atanh", "d"),
    new("Cbrt", "d"),
    new("Log2", "d"),
    new("Ceiling", "d"),
    new("Floor", "d"),
    new("Exp", "d"),
    new("Log", "d"),
    new("Log10", "d"),
    new("Round", "d"),
    new("Truncate", "d"),
};
var overridedUnaryOps = Array.Empty<RealOpDef>();
var unaryOpOverrideDefs = new List<OperatorOverrideDef>();
foreach(var vectorMathPath in Directory.GetFiles(Host.ResolvePath("../VectorMath"), "*.cs"))
{
    if(vectorMathPath.EndsWith(".g.cs"))
    {
        continue;
    }
    var vectorMathSource = File.ReadAllText(vectorMathPath);
    var matcheds = vectorMathMatcher.Matches(vectorMathSource);
    unaryOpOverrideDefs.AddRange(
        matcheds.Cast<Match>()
            .Select(match => new OperatorOverrideDef(match))
            .ToArray());
}
overridedUnaryOps = unaryOps
    .Where(x => unaryOpOverrideDefs.Any(y => x.Name == y.Name && x.Arguments.Length == y.Arguments.Length))
    .ToArray();

var binaryOps = new RealOpDef[]{
    new("Atan2", "y", "x"),
    new("Pow", "x", "y"),
    new("Log", "d", "newBase"),
    new("Scale", "n", "x"),
};
var overridedBinaryOps = Array.Empty<RealOpDef>();
var binaryOpOverrideDefs = new List<OperatorOverrideDef>();
foreach(var vectorMathPath in Directory.GetFiles(Host.ResolvePath("../VectorMath"), "*.cs"))
{
    if(vectorMathPath.EndsWith(".g.cs"))
    {
        continue;
    }
    var vectorMathSource = File.ReadAllText(vectorMathPath);
    var matcheds = vectorMathMatcher.Matches(vectorMathSource);
    binaryOpOverrideDefs.AddRange(
        matcheds.Cast<Match>()
            .Select(match => new OperatorOverrideDef(match))
            .ToArray());
}
overridedBinaryOps = binaryOps
    .Where(x => unaryOpOverrideDefs.Any(y => x.Name == y.Name && x.Arguments.Length == y.Arguments.Length))
    .ToArray();
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
namespace SmartVectorDotNet;

partial class Vectorization
{
<#  foreach(var unaryOp in unaryOps) {
        var arg1 = unaryOp.Arguments[0]; #>

    /// <summary>
    /// Operates <#=unaryOp.Name.ToLower()#>.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="<#=arg1#>"></param>
    /// <param name="ans"></param>
    /// <returns></returns>
    /// <exception cref="ArgumentException"></exception>
    public void <#=unaryOp#><T>(ReadOnlySpan<T> <#=arg1#>, Span<T> ans)
        where T : unmanaged
    {
        if(<#=arg1#>.Length != ans.Length) throw new ArgumentException(nameof(<#=arg1#>));
        <#=unaryOp#>Core(<#=arg1#>, ans);
    }

    /// <summary>
    /// Core implementation for <#=unaryOp.ToString().ToLower()#>.
    /// For this method it is ensured that all parameters have same length.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="<#=arg1#>"></param>
    /// <param name="ans"></param>
    /// <returns></returns>
    protected internal virtual void <#=unaryOp#>Core<T>(ReadOnlySpan<T> <#=arg1#>, Span<T> ans)
        where T : unmanaged
    {
        for(var i = 0; i < ans.Length; ++i)
            ans[i] = ScalarMath.<#=unaryOp#>(<#=arg1#>[i]);
    }

<#  } #>


<#  foreach(var binaryOp in binaryOps) {
        var arg1 = binaryOp.Arguments[0];
        var arg2 = binaryOp.Arguments[1]; #>

    /// <summary>
    /// Operates <#=binaryOp.Name.ToLower()#>.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="<#=arg1#>"></param>
    /// <param name="<#=arg2#>"></param>
    /// <param name="ans"></param>
    /// <returns></returns>
    /// <exception cref="ArgumentException"></exception>
    public void <#=binaryOp#><T>(T <#=arg1#>, ReadOnlySpan<T> <#=arg2#>, Span<T> ans)
        where T : unmanaged
    {
        if(<#=arg2#>.Length != ans.Length) throw new ArgumentException(nameof(<#=arg2#>));
        <#=binaryOp#>Core(<#=arg1#>, <#=arg2#>, ans);
    }

    /// <summary>
    /// Operates <#=binaryOp.Name.ToLower()#>.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="<#=arg1#>"></param>
    /// <param name="<#=arg2#>"></param>
    /// <param name="ans"></param>
    /// <returns></returns>
    /// <exception cref="ArgumentException"></exception>
    public void <#=binaryOp#><T>(ReadOnlySpan<T> <#=arg1#>, T <#=arg2#>, Span<T> ans)
        where T : unmanaged
    {
        if(<#=arg1#>.Length != ans.Length) throw new ArgumentException(nameof(<#=arg1#>));
        <#=binaryOp#>Core(<#=arg1#>, <#=arg2#>, ans);
    }

    /// <summary>
    /// Operates <#=binaryOp.Name.ToLower()#>.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="<#=arg1#>"></param>
    /// <param name="<#=arg2#>"></param>
    /// <param name="ans"></param>
    /// <returns></returns>
    /// <exception cref="ArgumentException"></exception>
    public void <#=binaryOp#><T>(ReadOnlySpan<T> <#=arg1#>, ReadOnlySpan<T> <#=arg2#>, Span<T> ans)
        where T : unmanaged
    {
        if(<#=arg1#>.Length != ans.Length) throw new ArgumentException(nameof(<#=arg1#>));
        if(<#=arg2#>.Length != ans.Length) throw new ArgumentException(nameof(<#=arg2#>));
        <#=binaryOp#>Core(<#=arg1#>, <#=arg2#>, ans);
    }

    /// <summary>
    /// Core implementation for <#=binaryOp.ToString().ToLower()#>.
    /// For this method it is ensured that all parameters have same length.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="<#=arg1#>"></param>
    /// <param name="<#=arg2#>"></param>
    /// <param name="ans"></param>
    /// <returns></returns>
    protected internal virtual void <#=binaryOp#>Core<T>(T <#=arg1#>, ReadOnlySpan<T> <#=arg2#>, Span<T> ans)
        where T : unmanaged
    {
        for(var i = 0; i < ans.Length; ++i)
            ans[i] = ScalarMath.<#=binaryOp#>(<#=arg1#>, <#=arg2#>[i]);
    }

    /// <summary>
    /// Core implementation for <#=binaryOp.ToString().ToLower()#>.
    /// For this method it is ensured that all parameters have same length.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="<#=arg1#>"></param>
    /// <param name="<#=arg2#>"></param>
    /// <param name="ans"></param>
    /// <returns></returns>
    protected internal virtual void <#=binaryOp#>Core<T>(ReadOnlySpan<T> <#=arg1#>, T <#=arg2#>, Span<T> ans)
        where T : unmanaged
    {
        for(var i = 0; i < ans.Length; ++i)
            ans[i] = ScalarMath.<#=binaryOp#>(<#=arg1#>[i], <#=arg2#>);
    }

    /// <summary>
    /// Core implementation for <#=binaryOp.ToString().ToLower()#>.
    /// For this method it is ensured that all parameters have same length.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="<#=arg1#>"></param>
    /// <param name="<#=arg2#>"></param>
    /// <param name="ans"></param>
    /// <returns></returns>
    protected internal virtual void <#=binaryOp#>Core<T>(ReadOnlySpan<T> <#=arg1#>, ReadOnlySpan<T> <#=arg2#>, Span<T> ans)
        where T : unmanaged
    {
        for(var i = 0; i < ans.Length; ++i)
            ans[i] = ScalarMath.<#=binaryOp#>(<#=arg1#>[i], <#=arg2#>[i]);
    }

<#  } #>
}


partial class SimdVectorization
{
<#  foreach(var unaryOp in overridedUnaryOps) {
        var arg1 = unaryOp.Arguments[0]; #>

    /// <inheritdoc />
    protected internal override void <#=unaryOp#>Core<T>(ReadOnlySpan<T> <#=arg1#>, Span<T> ans)
    {
        var vector<#=ToPascal(arg1)#> = MemoryMarshal.Cast<T, Vector<T>>(<#=arg1#>);
        var vectorAns = MemoryMarshal.Cast<T, Vector<T>>(ans);
        var vectorLength = vectorAns.Length * Vector<T>.Count;
        for(var i = 0; i < vectorAns.Length; ++i)
        {
            vectorAns[i] = VectorMath.<#=unaryOp#>(vector<#=ToPascal(arg1)#>[i]);
        }
        if(vectorLength < ans.Length)
        {
            var v<#=arg1#> = (stackalloc T[Vector<T>.Count]);
            <#=arg1#>.Slice(vectorLength).CopyTo(v<#=arg1#>);
            var vans = (stackalloc T[Vector<T>.Count]);
            Unsafe.As<T, Vector<T>>(ref vans[0]) = VectorMath.<#=unaryOp#>(Unsafe.As<T, Vector<T>>(ref v<#=arg1#>[0]));
            vans.Slice(0, ans.Length - vectorLength).CopyTo(ans.Slice(vectorLength));
        }
    }

<#  } #>

<#  foreach(var binaryOp in overridedBinaryOps) {
        var arg1 = binaryOp.Arguments[0]; 
        var arg2 = binaryOp.Arguments[1]; #>

    /// <inheritdoc />
    protected internal override void <#=binaryOp#>Core<T>(T <#=arg1#>, ReadOnlySpan<T> <#=arg2#>, Span<T> ans)
    {
        var vector<#=ToPascal(arg1)#> = new Vector<T>(<#=arg1#>);
        var vector<#=ToPascal(arg2)#> = MemoryMarshal.Cast<T, Vector<T>>(<#=arg2#>);
        var vectorAns = MemoryMarshal.Cast<T, Vector<T>>(ans);
        var vectorLength = vectorAns.Length * Vector<T>.Count;
        for(var i = 0; i < vectorAns.Length; ++i)
        {
            vectorAns[i] = VectorMath.<#=binaryOp#>(vector<#=ToPascal(arg1)#>, vector<#=ToPascal(arg2)#>[i]);
        }
        if(vectorLength < ans.Length)
        {
            var v<#=arg2#> = (stackalloc T[Vector<T>.Count]);
            <#=arg2#>.Slice(vectorLength).CopyTo(v<#=arg2#>);
            var vans = (stackalloc T[Vector<T>.Count]);
            Unsafe.As<T, Vector<T>>(ref vans[0]) = VectorMath.<#=binaryOp#>(vector<#=ToPascal(arg1)#>, Unsafe.As<T, Vector<T>>(ref v<#=arg2#>[0]));
            vans.Slice(0, ans.Length - vectorLength).CopyTo(ans.Slice(vectorLength));
        }
    }

    /// <inheritdoc />
    protected internal override void <#=binaryOp#>Core<T>(ReadOnlySpan<T> <#=arg1#>, T <#=arg2#>, Span<T> ans)
    {
        var vector<#=ToPascal(arg1)#> = MemoryMarshal.Cast<T, Vector<T>>(<#=arg1#>);
        var vector<#=ToPascal(arg2)#> = new Vector<T>(<#=arg2#>);
        var vectorAns = MemoryMarshal.Cast<T, Vector<T>>(ans);
        var vectorLength = vectorAns.Length * Vector<T>.Count;
        for(var i = 0; i < vectorAns.Length; ++i)
        {
            vectorAns[i] = VectorMath.<#=binaryOp#>(vector<#=ToPascal(arg1)#>[i], vector<#=ToPascal(arg2)#>);
        }
        if(vectorLength < ans.Length)
        {
            var v<#=arg1#> = (stackalloc T[Vector<T>.Count]);
            <#=arg1#>.Slice(vectorLength).CopyTo(v<#=arg1#>);
            var vans = (stackalloc T[Vector<T>.Count]);
            Unsafe.As<T, Vector<T>>(ref vans[0]) = VectorMath.<#=binaryOp#>(Unsafe.As<T, Vector<T>>(ref v<#=arg1#>[0]), vector<#=ToPascal(arg2)#>);
            vans.Slice(0, ans.Length - vectorLength).CopyTo(ans.Slice(vectorLength));
        }
    }

    /// <inheritdoc />
    protected internal override void <#=binaryOp#>Core<T>(ReadOnlySpan<T> <#=arg1#>, ReadOnlySpan<T> <#=arg2#>, Span<T> ans)
    {
        var vector<#=ToPascal(arg1)#> = MemoryMarshal.Cast<T, Vector<T>>(<#=arg1#>);
        var vector<#=ToPascal(arg2)#> = MemoryMarshal.Cast<T, Vector<T>>(<#=arg2#>);
        var vectorAns = MemoryMarshal.Cast<T, Vector<T>>(ans);
        var vectorLength = vectorAns.Length * Vector<T>.Count;
        for(var i = 0; i < vectorAns.Length; ++i)
        {
            vectorAns[i] = VectorMath.<#=binaryOp#>(vector<#=ToPascal(arg1)#>[i], vector<#=ToPascal(arg2)#>[i]);
        }
        if(vectorLength < ans.Length)
        {
            var v<#=arg1#> = (stackalloc T[Vector<T>.Count]);
            var v<#=arg2#> = (stackalloc T[Vector<T>.Count]);
            <#=arg1#>.Slice(vectorLength).CopyTo(v<#=arg1#>);
            <#=arg2#>.Slice(vectorLength).CopyTo(v<#=arg2#>);
            var vans = (stackalloc T[Vector<T>.Count]);
            Unsafe.As<T, Vector<T>>(ref vans[0]) = VectorMath.<#=binaryOp#>(Unsafe.As<T, Vector<T>>(ref v<#=arg1#>[0]), Unsafe.As<T, Vector<T>>(ref v<#=arg2#>[0]));
            vans.Slice(0, ans.Length - vectorLength).CopyTo(ans.Slice(vectorLength));
        }
    }

<#  } #>
}


<#+
public string ToPascal(string a) => char.ToUpper(a[0]) + a.Substring(1);

public class RealOpDef
{
    public string Name { get; }
    public string[] Arguments { get; }

    public RealOpDef(string name, params string[] arguments)
    {
        Name = name;
        Arguments = arguments;
    }

    public override string ToString()
        => Name;

    public string GetArgumentsDeclaration()
        => string.Concat(Arguments.Select(x => $"ReadOnlySpan<T> {x}, ")) + "Span<T> ans";

    public string GetCoreCallParams()
        => string.Concat(Arguments.Select(x => $"{x}, ")) + "ans";
}


public class OperatorOverrideDef
{
    private static readonly Regex _ArgumentMatcher = new (@"in\s+Vector\s*<\s*T\s*>\s+(?<argname>\w+)");

    public string Name { get; }
    public string[] Arguments { get; }

    public OperatorOverrideDef(Match match)
    {
        Name = match.Groups["method"].Value;
        Arguments = _ArgumentMatcher
            .Matches(match.Groups["args"].Value)
            .Cast<Match>()
            .Select(m => m.Groups["argname"].Value)
            .ToArray();
    }

    public override string ToString()
        => $"static Vector<T> {Name}<T>({string.Join(", ", Arguments.Select(a => $"Vector<T> {a}"))})";
}
#>

