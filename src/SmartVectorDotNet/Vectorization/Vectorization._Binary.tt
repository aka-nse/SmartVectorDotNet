<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
var operations = new OpDef[]
{
    new OpDef("Add"       , false, (ans, x, y) => $"{ans} = {x} + {y}"),
    new OpDef("Subtract"  , false, (ans, x, y) => $"{ans} = {x} - {y}"),
    new OpDef("Multiply"  , false, (ans, x, y) => $"{ans} = {x} * {y}"),
    new OpDef("Divide"    , false, (ans, x, y) => $"{ans} = {x} / {y}"),
    new OpDef("BitwiseAnd", false, (ans, x, y) => $"{ans} = {x} & {y}"),
    new OpDef("BitwiseOr" , false, (ans, x, y) => $"{ans} = {x} | {y}"),
    new OpDef("BitwiseXor", false, (ans, x, y) => $"{ans} = {x} ^ {y}"),
    new OpDef("Equals"             , true, (ans, x, y) => $"{ans} = Vector.Equals({x}, {y})"),
    new OpDef("LessThan"           , true, (ans, x, y) => $"{ans} = Vector.LessThan({x}, {y})"),
    new OpDef("LessThanOrEquals"   , true, (ans, x, y) => $"{ans} = Vector.LessThanOrEqual({x}, {y})"),
    new OpDef("GreaterThan"        , true, (ans, x, y) => $"{ans} = Vector.GreaterThan({x}, {y})"),
    new OpDef("GreaterThanOrEquals", true, (ans, x, y) => $"{ans} = Vector.GreaterThanOrEqual({x}, {y})"),
};
#>
#nullable enable
using System;
using System.Collections.Generic;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SmartVectorDotNet;

<# foreach(var op in operations) { #>
#region <#=op.Name.ToLower()#>
partial class Vectorization
{
    /// <summary>
    /// Operates <#=op.Name.ToLower()#> for each corresponding elements of <paramref name="x"/> and <paramref name="y"/>.
    /// </summary>
    /// <typeparam name="T"> The type of elements. </typeparam>
    /// <param name="x"> The left hand side operand elements. </param>
    /// <param name="y"> The right hand side operand elements. </param>
    /// <param name="ans"> The destination of answer. </param>
    /// <exception cref="ArgumentException"> <paramref name="y"/> and <paramref name="ans"/> must have same length. </exception>
    /// <exception cref="NotSupportedException"> The operation for <typeparamref name="T"/> is not supported. </exception>
    public void <#=op.Name#><T>(T x, ReadOnlySpan<T> y, Span<T> ans)
        where T : unmanaged
    {
        if(y.Length != ans.Length)
            throw new ArgumentException("`y` and `ans` must have same length.");
        <#=op.Name#>Core(x, y, ans);
    }

    /// <summary>
    /// Operates <#=op.Name.ToLower()#> for each corresponding elements of <paramref name="x"/> and <paramref name="y"/>.
    /// </summary>
    /// <typeparam name="T"> The type of elements. </typeparam>
    /// <param name="x"> The left hand side operand elements. </param>
    /// <param name="y"> The right hand side operand elements. </param>
    /// <param name="ans"> The destination of answer. </param>
    /// <exception cref="ArgumentException"> <paramref name="x"/>, <paramref name="y"/>, and <paramref name="ans"/> must have same length. </exception>
    /// <exception cref="NotSupportedException"> The operation for <typeparamref name="T"/> is not supported. </exception>
    public void <#=op.Name#><T>(ReadOnlySpan<T> x, T y, Span<T> ans)
        where T : unmanaged
    {
        if(x.Length != ans.Length)
            throw new ArgumentException("`x` and `ans` must have same length.");
        <#=op.Name#>Core(x, y, ans);
    }

    /// <summary>
    /// Operates <#=op.Name.ToLower()#> for each corresponding elements of <paramref name="x"/> and <paramref name="y"/>.
    /// </summary>
    /// <typeparam name="T"> The type of elements. </typeparam>
    /// <param name="x"> The left hand side operand elements. </param>
    /// <param name="y"> The right hand side operand elements. </param>
    /// <param name="ans"> The destination of answer. </param>
    /// <exception cref="ArgumentException"> <paramref name="x"/>, <paramref name="y"/>, and <paramref name="ans"/> must have same length. </exception>
    /// <exception cref="NotSupportedException"> The operation for <typeparamref name="T"/> is not supported. </exception>
    public void <#=op.Name#><T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans)
        where T : unmanaged
    {
        if(x.Length != ans.Length)
            throw new ArgumentException("`x` and `ans` must have same length.");
        if(y.Length != ans.Length)
            throw new ArgumentException("`y` and `ans` must have same length.");
        <#=op.Name#>Core(x, y, ans);
    }

<# if(!op.IsComparison) { #>

    /// <summary>
    /// Core implementation for <see cref="<#=op.Name#>{T}(T, ReadOnlySpan{T}, Span{T})" />.
    /// For this method it is ensured that all parameters have same length.
    /// </summary>
    /// <typeparam name="T"> The type of elements. </typeparam>
    /// <param name="x"> The left hand side operand elements. </param>
    /// <param name="y"> The right hand side operand elements. </param>
    /// <param name="ans"> The destination of answer. </param>
    protected internal virtual void <#=op.Name#>Core<T>(T x, ReadOnlySpan<T> y, Span<T> ans)
        where T : unmanaged
    {
        for (var i = 0; i < ans.Length; ++i)
            ans[i] = ScalarOp.<#=op.Name#>(x, y[i]);
    }
    
    /// <summary>
    /// Core implementation for <see cref="<#=op.Name#>{T}(ReadOnlySpan{T}, T, Span{T})" />.
    /// For this method it is ensured that all parameters have same length.
    /// </summary>
    /// <typeparam name="T"> The type of elements. </typeparam>
    /// <param name="x"> The left hand side operand elements. </param>
    /// <param name="y"> The right hand side operand elements. </param>
    /// <param name="ans"> The destination of answer. </param>
    protected internal virtual void <#=op.Name#>Core<T>(ReadOnlySpan<T> x, T y, Span<T> ans)
        where T : unmanaged
    {
        for (var i = 0; i < ans.Length; ++i)
            ans[i] = ScalarOp.<#=op.Name#>(x[i], y);
    }
    
    /// <summary>
    /// Core implementation for <see cref="<#=op.Name#>{T}(ReadOnlySpan{T}, ReadOnlySpan{T}, Span{T})" />.
    /// For this method it is ensured that all parameters have same length.
    /// </summary>
    /// <typeparam name="T"> The type of elements. </typeparam>
    /// <param name="x"> The left hand side operand elements. </param>
    /// <param name="y"> The right hand side operand elements. </param>
    /// <param name="ans"> The destination of answer. </param>
    protected internal virtual void <#=op.Name#>Core<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans)
        where T : unmanaged
    {
        for (var i = 0; i < ans.Length; ++i)
            ans[i] = ScalarOp.<#=op.Name#>(x[i], y[i]);
    }

<# } else { #>

    /// <summary>
    /// Core implementation for <see cref="<#=op.Name#>{T}(T, ReadOnlySpan{T}, Span{T})" />.
    /// For this method it is ensured that all parameters have same length.
    /// </summary>
    /// <typeparam name="T"> The type of elements. </typeparam>
    /// <param name="x"> The left hand side operand elements. </param>
    /// <param name="y"> The right hand side operand elements. </param>
    /// <param name="ans"> The destination of answer. </param>
    protected internal virtual void <#=op.Name#>Core<T>(T x, ReadOnlySpan<T> y, Span<T> ans)
        where T : unmanaged
    {
        for (var i = 0; i < ans.Length; ++i)
            ans[i] = ScalarOp.<#=op.Name#>(x, y[i])
                ? ScalarOp.True<T>()
                : ScalarOp.False<T>();
    }
    
    /// <summary>
    /// Core implementation for <see cref="<#=op.Name#>{T}(ReadOnlySpan{T}, T, Span{T})" />.
    /// For this method it is ensured that all parameters have same length.
    /// </summary>
    /// <typeparam name="T"> The type of elements. </typeparam>
    /// <param name="x"> The left hand side operand elements. </param>
    /// <param name="y"> The right hand side operand elements. </param>
    /// <param name="ans"> The destination of answer. </param>
    protected internal virtual void <#=op.Name#>Core<T>(ReadOnlySpan<T> x, T y, Span<T> ans)
        where T : unmanaged
    {
        for (var i = 0; i < ans.Length; ++i)
            ans[i] = ScalarOp.<#=op.Name#>(x[i], y)
                ? ScalarOp.True<T>()
                : ScalarOp.False<T>();
    }
    
    /// <summary>
    /// Core implementation for <see cref="<#=op.Name#>{T}(ReadOnlySpan{T}, ReadOnlySpan{T}, Span{T})" />.
    /// For this method it is ensured that all parameters have same length.
    /// </summary>
    /// <typeparam name="T"> The type of elements. </typeparam>
    /// <param name="x"> The left hand side operand elements. </param>
    /// <param name="y"> The right hand side operand elements. </param>
    /// <param name="ans"> The destination of answer. </param>
    protected internal virtual void <#=op.Name#>Core<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans)
        where T : unmanaged
    {
        for (var i = 0; i < ans.Length; ++i)
            ans[i] = ScalarOp.<#=op.Name#>(x[i], y[i])
                ? ScalarOp.True<T>()
                : ScalarOp.False<T>();
    }

<# } #>
}

partial class SimdVectorization
{
    /// <inheritdoc />
    protected internal override sealed void <#=op.Name#>Core<T>(T x, ReadOnlySpan<T> y, Span<T> ans)
    {
        var vectorX = new Vector<T>(x);
        var vectorY = MemoryMarshal.Cast<T, Vector<T>>(y);
        var vectorAns = MemoryMarshal.Cast<T, Vector<T>>(ans);
        var vectorLength = vectorAns.Length * Vector<T>.Count;
        for(var i = 0; i < vectorAns.Length; ++i)
        {
            <#=op.GenerateFunc("vectorAns[i]", "vectorX", "vectorY[i]")#>;
        }
        if(vectorLength < ans.Length)
        {
            var vy = (stackalloc T[Vector<T>.Count]);
            var vans = (stackalloc T[Vector<T>.Count]);
            y.Slice(vectorLength).CopyTo(vy);
            <#=op.GenerateFunc("Unsafe.As<T, Vector<T>>(ref vans[0])", "vectorX", "Unsafe.As<T, Vector<T>>(ref vy[0])")#>; 
            vans.Slice(0, ans.Length - vectorLength).CopyTo(ans.Slice(vectorLength));
        }
    }

    /// <inheritdoc />
    protected internal override sealed void <#=op.Name#>Core<T>(ReadOnlySpan<T> x, T y, Span<T> ans)
    {
        var vectorX = MemoryMarshal.Cast<T, Vector<T>>(x);
        var vectorY = new Vector<T>(y);
        var vectorAns = MemoryMarshal.Cast<T, Vector<T>>(ans);
        var vectorLength = vectorAns.Length * Vector<T>.Count;
        for(var i = 0; i < vectorAns.Length; ++i)
        {
            <#=op.GenerateFunc("vectorAns[i]", "vectorX[i]", "vectorY")#>;
        }
        if(vectorLength < ans.Length)
        {
            var vx = (stackalloc T[Vector<T>.Count]);
            var vans = (stackalloc T[Vector<T>.Count]);
            x.Slice(vectorLength).CopyTo(vx);
            <#=op.GenerateFunc("Unsafe.As<T, Vector<T>>(ref vans[0])", "Unsafe.As<T, Vector<T>>(ref vx[0])", "vectorY")#>; 
            vans.Slice(0, ans.Length - vectorLength).CopyTo(ans.Slice(vectorLength));
        }
    }

    /// <inheritdoc />
    protected internal override sealed void <#=op.Name#>Core<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans)
    {
        var vectorX = MemoryMarshal.Cast<T, Vector<T>>(x);
        var vectorY = MemoryMarshal.Cast<T, Vector<T>>(y);
        var vectorAns = MemoryMarshal.Cast<T, Vector<T>>(ans);
        var vectorLength = vectorAns.Length * Vector<T>.Count;
        for(var i = 0; i < vectorAns.Length; ++i)
        {
            <#=op.GenerateFunc("vectorAns[i]", "vectorX[i]", "vectorY[i]")#>;
        }
        if(vectorLength < ans.Length)
        {
            var vx = (stackalloc T[Vector<T>.Count]);
            var vy = (stackalloc T[Vector<T>.Count]);
            var vans = (stackalloc T[Vector<T>.Count]);
            x.Slice(vectorLength).CopyTo(vx);
            y.Slice(vectorLength).CopyTo(vy);
            <#=op.GenerateFunc("Unsafe.As<T, Vector<T>>(ref vans[0])", "Unsafe.As<T, Vector<T>>(ref vx[0])", "Unsafe.As<T, Vector<T>>(ref vy[0])")#>; 
            vans.Slice(0, ans.Length - vectorLength).CopyTo(ans.Slice(vectorLength));
        }
    }
}
#endregion

<# } #>
<#+
class OpDef
{
    public string Name { get; }
    public bool IsComparison { get; }
    public Func<string, string, string, string> GenerateFunc { get; }

    public OpDef(string name, bool isComparison, Func<string, string, string, string> generateFunc)
    {
        Name = name;
        IsComparison = isComparison;
        GenerateFunc = generateFunc;
    }
}
#>
