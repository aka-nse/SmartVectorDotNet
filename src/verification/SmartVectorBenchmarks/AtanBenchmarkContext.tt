<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
var memberNumbers = new [] {
    2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
};
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using BenchmarkDotNet.Attributes;

namespace SmartVectorBenchmarks;

public partial class AtanBenchmarkContext
{
    public IReadOnlyDictionary<string, double> EvaluateErrors()
    {
        var retval = new Dictionary<string, double>();
        var expEmulated = Use_Atan_Emulated();
<#  foreach(var i in memberNumbers) { #>
        retval["Atan_<#=i#>"] = BenchmarkHelper.CalculateErrorRelative(expEmulated, Use_Atan_<#=i#>());
<#  } #>
        return retval;
    }

<#  foreach(var i in memberNumbers) { #>

    [Benchmark]
    public double[] Use_Atan_<#=i#>()
    {
        var retval = new double[BenchmarkSize];
        var retvalAsVector = MemoryMarshal.Cast<double, Vector<double>>(retval);
        var xAsVector = XAsVector;
        for(var i = 0; i < xAsVector.Length; ++i)
        {
            retvalAsVector[i] = Atan_<#=i#>(xAsVector[i]);
        }
        return retval;
    }

    private static Vector<double> Atan_<#=i#>(in Vector<double> x)
    {
        static Vector<double> core(Vector<double> x)
        {
            var condition = Vector.LessThan(x, _CoreXReflectThreshold);
            x = Vector.ConditionalSelect(
                condition,
                x,
                (x - Vector<double>.One) / (x + Vector<double>.One)
            );
            var offset = Vector.ConditionalSelect(
                condition,
                Vector<double>.Zero,
                _CoreOffset
            );
            var x2 = x * x;
            return x * (Vector<double>.One
<#      for(var j = 0; j < i; ++j) { #>
                + x2 * (_AtanCoeffs[<#=j#>]
<#      } #>
                <#=new string(')', i + 1)#> + offset;
        }

        var sign = SignFast(x);
        var xx = sign * x;
        var xxx = Vector.ConditionalSelect(
            Vector.LessThan(xx, Vector<double>.One),
            xx,
            Vector<double>.One / xx
        );
        var y = core(xxx);
        return sign * Vector.ConditionalSelect(
            Vector.LessThan(xx, Vector<double>.One),
            y,
            _WrapperOffset - y
        );
    }

<#  } #>
}