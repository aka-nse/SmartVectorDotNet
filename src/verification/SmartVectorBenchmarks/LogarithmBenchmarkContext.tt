<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
int[] numberOfMembers = new []{5, 8, 10, 20, 30, 50};
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using BenchmarkDotNet.Attributes;

namespace SmartVectorBenchmarks;

partial class LogarithmBenchmarkContext
{
    public IReadOnlyDictionary<string, double> EvaluateErrors()
    {
        var retval = new Dictionary<string, double>();
        var logEmulated = Use_Log_Emulated();
<#  foreach(var i in numberOfMembers) { #>
        retval["Log_<#=i#>"] = BenchmarkHelper.CalculateErrorAbsolute(logEmulated, Use_Log_<#=i#>());
<#  } #>
        return retval;
    }
<#  foreach(var i in numberOfMembers) { #>

    [Benchmark]
    public double[] Use_Log_<#=i#>()
    {
        var retval = new double[BenchmarkSize];
        var retvalAsVector = MemoryMarshal.Cast<double, Vector<double>>(retval);
        var xAsVector = XAsVector;
        for(var i = 0; i < xAsVector.Length; ++i)
        {
            retvalAsVector[i] = Log_<#=i#>(xAsVector[i]);
        }
        return retval;
    }

    private static Vector<double> Log_<#=i#>(in Vector<double> x)
    {
        var xx = x * OnePerRoot2 - Vector<double>.One;
        return LogRoot2
<#      for(var j = 1; j < i; ++j) { #>
            + xx * (LogCoeffs[<#=j#> - 1]
<#      } #>
            <#=new string(')', i - 1)#>;
    }

<#  } #>
}